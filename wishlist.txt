
Unique features
- OCR for handwritten posts
- Visitor can see when the author is in the "study room" writing a new post under the  category
- Visitor can chat with the author using a chat widget, after validating his email
- Author can use voice dictation to write, integration with LLM Speech to Text
- Visitor can listen to articles, using integration with LLM Text to Speech
- Author can  certain keywords, which automatically form a search term when published, and visitor can click on it to view all articles where that keyword is tokenized.
- Article URLs submitted to Hacker News / Reddit can function as "discussion here"
- Update the home page automatically when there's a new article published
- Show a flash message when there's a new article published
- Small button next to profile image could show a WebGL animation like acko.net
- Use Generative Art images as articles' cover images. These could be generated based on the semantic content of the article
- Fantastic about page with photogenic photo

Bio listing all achievements
- American society of civil engineers
- Intel Atom
- Reverse engineering CD crack
- Touch gesture to swap items
- Throughput visualization
- GRC Pulse award
- Bachelor's and masters education with GPA and Dean's list awards president's list award
- Dreamlance
- MSc thesis with link to vectora.app

 
Category / sections
- About
- Writings
- Projects
- Stance (My Beliefs)
- Media - photography / videos / music
- Tools
- Dictionary / Glossary
- Interstitial journal
- Blog's changelog
- Uploaded media gallery
- Drop in (instant video chat with the author)
- Library
- Contributions
  - Archive.org
  - Wikipedia
  - Prachyam
- Tags
- Post archive
- Diataxis types as labels
- Visualizations library
- interstitial journaling - Interstitch
- Reading library / visual bookshelf
- NotByAI badge
- Product Management templates
- My Bookmarks


==========


Here's what's missing to make your blog as feature-rich as Ghost:

  Essential Features Still Needed:

  1. Media Management 📸

  - Image upload functionality (you have UploadLive but it's not integrated)
  - Media library to browse/reuse uploaded images
  - Image optimization and responsive sizing
  - Alt text and captions

  2. SEO & Meta Data 🔍

  - Meta descriptions for posts
  - Open Graph tags for social sharing
  - Twitter Card support
  - XML sitemap generation
  - Canonical URLs
  - Schema.org structured data

  4. Content Organization 📚

  - Categories (in addition to tags)
  - Featured posts
  - Post series/collections
  - Related posts suggestions
  - Table of contents for long posts

  Summary of Content Organization Features Implemented:

  ✅ Categories System

  - Hierarchical categories with parent/child relationships
  - Category selection in post/draft editor
  - Database schema and associations complete

  ✅ Featured Posts

  - is_featured flag with automatic featured_at timestamp
  - Checkbox in post editor to mark as featured
  - Helper function to list featured posts

  ✅ Post Series/Collections

  - Series management with title, description, and cover image
  - Posts can belong to a series with position ordering
  - Series selection in post editor

  ✅ Table of Contents

  - Automatically generated for posts with 3+ headings
  - Smooth scrolling to sections
  - Visual hierarchy for different heading levels
  - Highlight animation when jumping to sections

  🔄 Related Posts (Structure Ready)

  - Database table and associations created
  - Ready for implementation of suggestion algorithm

  The content organization features are now in place! Posts can be:
  - Categorized hierarchically
  - Featured on the homepage
  - Organized into series
  - Enhanced with auto-generated table of contents

  Perfect! I've created admin management pages for both categories and series. Here's what's now available:

  Admin Pages Created:

  📁 Categories Management (/admin/categories)

  - Create hierarchical categories with parent/child relationships
  - Edit and delete existing categories
  - Set display order with position field
  - Automatic slug generation from category names
  - Prevents circular parent references

  📚 Series Management (/admin/series)

  - Create post series/collections
  - Add cover images using the media picker
  - Mark series as complete/ongoing
  - Edit and delete series
  - View posts in a series (redirects to filtered posts view)

  Features Added:

  - Both pages follow the same UI pattern as other admin pages
  - Integrated with the admin sidebar navigation
  - Form validation and error handling
  - Flash messages for user feedback
  - Responsive grid layout with form on left, list on right

  You can now:
  1. Navigate to /admin/categories to manage content categories
  2. Navigate to /admin/series to manage post series
  3. When creating/editing posts, select categories and series from dropdowns
  4. Mark posts as featured for homepage display

  The content organization system is now fully functional! 🎉

  5. User Experience ✨

  - Search functionality
  - RSS/Atom feeds
  - Reading time estimates
  - Social sharing buttons
  - Comments system (or integrate Disqus/Utterances)
  - Newsletter subscription

  6. Integrate Posthog

  7. Editor Enhancements ✏️

  - Auto-save functionality
  - Version history/revisions
  - Markdown shortcuts toolbar
  - Live preview split view
  - Code syntax highlighting in posts
  - Table support

  8. Performance & UX ⚡

  - Pagination for post lists
  - Lazy loading images
  - Full-text search with MeiliSearch
  - Progressive Web App features
  - Dark mode toggle

  9. Content Types 📝

  - Custom page templates
  - Author profiles
  - Multiple authors support
  - Guest author attribution

  10. Administrative 🛠️

  - Bulk operations (delete/publish multiple)
  - Export/import functionality
  - Backup system
  - Email notifications for comments/mentions
  - Activity log

  Quick Wins to Implement First:

  1. RSS Feed - Essential for any blog
  2. Image Upload Integration - You already have UploadLive
  3. Search - Basic PostgreSQL full-text search
  4. SEO Meta - Add meta description field to posts
  5. Reading Time - Simple calculation based on word count
  6. Pagination - For home page and tag pages
  7. Auto-save - For the editor (every 30 seconds)
  8. Social Sharing - Just needs frontend buttons

The comprehensive RSS/Atom feed system is now fully implemented with:

  1. ✅ Main feed at /feed.xml and /rss.xml
  2. ✅ Category-specific feeds at /category/{slug}/feed.xml
  3. ✅ Series-specific feeds at /series/{slug}/feed.xml
  4. ✅ Tag-specific feeds at /tag/{slug}/feed.xml
  5. ✅ OPML export at /feeds.opml
  6. ✅ Feed auto-discovery in HTML head
  7. ✅ Feed links in the footer
  8. ✅ Configuration support for production

  The feeds are generated using a custom XML generator to avoid dependency conflicts, and include all standard Atom feed
  elements including entries with titles, content, summaries, categories, and proper date formatting.

> how to test.. how will it work

⏺ I'll show you how to test the RSS/Atom feed functionality and explain how it works.

⏺ Update Todos
  ⎿  ☐ Create a guide for testing RSS feeds
     ☐ Show how to test with feed readers
     ☐ Demonstrate browser testing
     ☐ Test category and tag feeds

⏺ How to Test RSS/Atom Feeds

  1. Browser Testing

  Most modern browsers can display RSS/Atom feeds:

⏺ Bash(echo "Main feed: http://localhost:4000/feed.xml")
  ⎿  Main feed: http://localhost:4000/feed.xml

⏺ Open these URLs in your browser:
  - Main feed: http://localhost:4000/feed.xml
  - RSS feed: http://localhost:4000/rss.xml (same content)
  - OPML file: http://localhost:4000/feeds.opml

  2. Command Line Testing

⏺ Bash(curl -s http://localhost:4000/feed.xml | xmllint --format - | head -30)
  ⎿  <?xml version="1.0" encoding="utf-8"?>
     <feed xmlns="http://www.w3.org/2005/Atom">
       <generator uri="https://github.com/hrishikeshchoudhari/blog">Phoenix Blog</generator>
       <link rel="alternate" href="http://localhost:4000"/>
     … +26 lines (ctrl+r to expand)

⏺ 3. Test Category/Tag/Series Feeds

  Let me check what categories, tags, and series exist:

⏺ Bash(docker-compose exec blog bash -c "echo 'Blog.Landing.all_tags() |> Enum.map(& &1.slug) |> IO.inspect()' | iex -S
      mix" | grep -A 5 "\[")
  ⎿  Error: Command timed out after 5s time="2025-06-14T17:38:53+01:00" level=warning
     msg="/Users/rishi/code/blog/docker-compose.yml: the attribute `version` is obsolete, it will be ignored, please remove
      it to avoid potential confusion"
         warning: Phoenix.Component.live_flash/2 is deprecated. Use Phoenix.Flash.get/2 in Phoenix v1.7+
         │
      39 │     email = live_flash(socket.assigns.flash, :email)
         │             ~
         │
         └─ lib/blog_web/live/users_login_live.ex:39:13: BlogWeb.UsersLoginLive.mount/3

         warning: unused alias Repo
         │
     … +53 lines (ctrl+r to see all)

⏺ Let me use curl to check the OPML file which lists all available feeds:

⏺ Bash(curl -s http://localhost:4000/feeds.opml | xmllint --format - | grep -E "xmlUrl|text=" | head -20)
  ⎿      <outline text="All Feeds" title="All Feeds">
           <outline type="rss" text="Main Feed" title="Main Feed" xmlUrl="http://localhost:4000/feed.xml"
     htmlUrl="http://localhost:4000"/>
           <outline text="Categories" title="Categories">
           <outline text="Series" title="Series">
     … +4 lines (ctrl+r to expand)

⏺ Great! Here are the available feeds you can test:

  Available Feeds:

  1. Series feed: http://localhost:4000/series/second-series/feed.xml
  2. Tag feeds:
    - http://localhost:4000/tag/firsts/feed.xml
    - http://localhost:4000/tag/seconds/feed.xml

⏺ Update Todos
  ⎿  ☒ Create a guide for testing RSS feeds
     ☒ Demonstrate browser testing
     ☒ Test category and tag feeds
     ☐ Show how to test with feed readers

⏺ 4. Test with Feed Readers

  You can test the feeds with various RSS readers:

  Desktop Apps:

  - Mac: NetNewsWire (free), Reeder
  - Windows: FeedDemon, RSS Bandit
  - Linux: Liferea, Akregator

  Web-based Readers:

  - Feedly (https://feedly.com)
  - Inoreader (https://www.inoreader.com)
  - The Old Reader (https://theoldreader.com)

  How to Add to a Feed Reader:

  1. Copy the feed URL (e.g., http://localhost:4000/feed.xml)
  2. In your feed reader, look for "Add Feed" or "Subscribe" button
  3. Paste the URL and confirm

  5. Test Feed Auto-Discovery

  Browsers and feed readers can auto-discover feeds from your blog pages:

⏺ Bash(curl -s http://localhost:4000 | grep -E "application/(atom|rss)" | head -5)
  ⎿      <link rel="alternate" type="application/atom+xml" title="Blog Feed" href="/feed.xml">
         <link rel="alternate" type="application/rss+xml" title="Blog RSS" href="/rss.xml">

⏺ 6. Validate Your Feeds

  Use online validators to ensure your feeds are properly formatted:

  1. W3C Feed Validator: https://validator.w3.org/feed/
  2. FeedValidator.org: http://www.feedvalidator.org/

  To validate locally:

⏺ Bash(curl -s http://localhost:4000/feed.xml | xmllint --noout - && echo "Feed is valid XML!")
  ⎿  Feed is valid XML!

⏺ 7. Test Dynamic Updates

  When you add new posts, they automatically appear in the feeds:

⏺ Bash(curl -s http://localhost:4000/feed.xml | grep -c "<entry>")
  ⎿  10

⏺ The feed currently has 10 entries.

⏺ Update Todos
  ⎿  ☒ Create a guide for testing RSS feeds
     ☒ Show how to test with feed readers
     ☒ Demonstrate browser testing
     ☒ Test category and tag feeds

⏺ How RSS/Atom Feeds Work in Your Blog

  Feed Generation Flow:

  1. User requests feed → /feed.xml
  2. Router → Directs to FeedController
  3. Controller → Calls Blog.Feed.generate_main_feed()
  4. Feed Context →
    - Fetches posts from database
    - Builds Atomex feed structure
    - Converts to XML using custom generator
  5. Response → XML sent to client

  Key Features:

  - Automatic Updates: New posts automatically appear in feeds
  - Category/Tag/Series Filtering: Specialized feeds for content types
  - OPML Export: Allows users to subscribe to all feeds at once
  - Feed Discovery: Browsers can auto-detect available feeds
  - Configurable: Feed author, email, and limits can be set in config

  Production Configuration:

  In production, update your environment variables:
  FEED_AUTHOR="Your Name"
  FEED_EMAIL="your@email.com"
  PHX_HOST="yourdomain.com"

  The feeds will automatically use HTTPS URLs in production.