# Production Dockerfile for Phoenix application
# Build stage
FROM elixir:1.16.3-alpine AS build

# Install build dependencies
RUN apk add --no-cache build-base git nodejs npm

# Prepare build directory
WORKDIR /app

# Install hex + rebar
RUN mix local.hex --force && \
    mix local.rebar --force

# Set build ENV
ENV MIX_ENV=prod

# Install mix dependencies
COPY mix.exs mix.lock ./
RUN mix deps.get --only $MIX_ENV
RUN mkdir config

# Copy compile-time config files before we compile dependencies
# to ensure any relevant config change will trigger the dependencies
# to be re-compiled.
COPY config/config.exs config/${MIX_ENV}.exs config/
RUN mix deps.compile

# Copy assets
COPY assets assets
COPY priv priv

# Compile assets
RUN cd assets && npm install && cd ..
RUN mix assets.deploy

# Compile the release
COPY lib lib
COPY config/runtime.exs config/

RUN mix compile

# Changes to config/runtime.exs don't require recompiling the code
RUN mix release

# Runtime stage
FROM alpine:3.19 AS runtime

# Install runtime dependencies
RUN apk add --no-cache libstdc++ openssl ncurses-libs

WORKDIR /app

# Create app user
RUN addgroup -g 1000 -S app && \
    adduser -u 1000 -S app -G app

# Copy the release from build stage
COPY --from=build --chown=app:app /app/_build/prod/rel/blog ./

# Copy backup scripts if needed
COPY --chown=app:app backups backups

# Create necessary directories
RUN mkdir -p /app/uploads && chown -R app:app /app/uploads

USER app

# Set runtime ENV
ENV HOME=/app
ENV MIX_ENV=prod
ENV PORT=4000

EXPOSE 4000

CMD ["bin/blog", "start"]